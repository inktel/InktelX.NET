using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


using System.ComponentModel;
using System.Data.Common;
using System.Transactions;

using System.Web;
using System.Reflection;
using System.Data.Objects.DataClasses;
using System.Text.RegularExpressions;

using InktelX.Engine.Logging;

namespace InktelX.Engine
{
	/// <summary>
	/// The current main class for interacting with InktelX and Vicidial.  In future iterations, as the API gets larger, common API's will be grouped into respective namespaces and classes as deemeded appropriate.
	/// </summary>
	[DataObject]
	public class MainFacade
	{
		VicidialEntities _emv = null;
		DbTransaction _dbt = null;
		HttpContext _context = null;

		//Events
		public event EventHandler OnError;
		public event UserAdded OnUserAdded;
		public event CampaignAdded OnCampaignAdded;


		/// <summary>
		/// Main constructor passing connection string or connection string key.
		/// </summary>
		/// <param name="mysqlcs"></param>
		public MainFacade(string mysqlcs)
		{
			_emv = new VicidialEntities(mysqlcs);
		}

		/// <summary>
		/// Similar to main constructor with the addition of the HttpContext, typically passed as System.Web.HttpContext.Current.  Some API's require the context
		/// to extrat context information such as IP address, etc.  The API's needing the context will throw an exception alerting the developer to this.
		/// </summary>
		/// <param name="mysqlcs"></param>
		/// <param name="context"></param>
		public MainFacade(string mysqlcs, HttpContext context)
			: this(mysqlcs)
		{
			_context = context;
		}

		public MainFacade() : this(ConfigManager.ConnectionStrings.VicidialEntities) { }

		/// <summary>
		/// Gets all the vidial_users within vicidial.
		/// </summary>
		/// <returns>All the users.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_users> GetUsers()
		{
			return _emv.vicidial_users.OrderBy(t => t.user);
		}

		/// <summary>
		/// Gets users matching a specific pattern.  The user will be included in the return set if the pattern is a substring of full name or username.
		/// </summary>
		/// <param name="searchPattern">The search pattern to apply.</param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_users> GetUsers(string searchPattern)
		{

			var users = GetUsers();

			if (searchPattern == null)
				return users;

			return from t in users
				   where t.full_name.Contains(searchPattern) ||
				   t.user.Contains(searchPattern)
				   select t;

		}

		/// <summary>
		/// Add a user to the vicidial system.
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="userLevel">Value must be 1 through 9.</param>
		/// <param name="group"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_users AddUser(string userName, string password, string firstName, string lastName, int userLevel, vicidial_user_groups group)
		{
			//rule: userlevel has to be 1 through 9
			if (userLevel < 1 || userLevel > 9)
				throw new ApplicationException("Userslevel must be between 1 and 9");

			vicidial_users vu = new vicidial_users();
			vu.user = userName;
			vu.pass = password;
			vu.full_name = String.Format("{0} {1}", firstName, lastName);
			vu.user_level = (sbyte)userLevel;
			vu.user_group = group.group_name;



			_emv.vicidial_users.AddObject(vu);
			_emv.SaveChanges();

			//Vici PHPRule -- add to vicidial_admin_log
			AddUserLogEntry(userName, password, vu.full_name, userLevel, vu.user_group);
			UserAdded handler = OnUserAdded;
			if (handler != null)
				handler(vu);

			return vu;
		}

		private vicidial_admin_log AddUserLogEntry(string user, string password, string fullname, int userlevel, string userGroup)
		{
			vicidial_admin_log val = new vicidial_admin_log();
			val.event_code = "ADMIN ADD USER";
			val.event_type = "ADD";
			val.event_section = "USERS";
			val.record_id = user;
			val.user = "root";	//TODO - revise when authentication is applied


			val.event_notes = String.Format("user: {0}", user);

			if (_context != null)
				val.ip_address = _context.Request.ServerVariables["REMOTE_ADDR"];
			else
				val.ip_address = "0.0.0.0";

			val.event_sql = String.Format("INSERT INTO vicidial_users (user,pass,full_name,user_level,user_group,phone_login,phone_pass) values(''{0}'',''{1}'',''{2}'',''{3}'',''{4}'','''','''')|",
				user,
				password,
				fullname,
				userlevel,
				userGroup);

			_emv.vicidial_admin_log.AddObject(val);
			_emv.SaveChanges();

			return val;
		}


		/// <summary>
		/// Adds a user to Vicidial with an autogenerated username based on provided firstName and lastName.  Username will be first letter
		/// of first name, followed by at most five first letters of lastname and then optionally a 1, 2, 3, etc. up to 99 to account for conflicting
		/// names.
		/// </summary>
		/// <param name="password"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="userLevel">Value must be 1 through 9.</param>
		/// <param name="group"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_users AddUser(string password, string firstName, string lastName, int userLevel, vicidial_user_groups group)
		{
			//validation Rule -- since we have to autogenerate, fn & ln cannot be null
			//we generate userid with first letter of first name, lastname, followed by 01,02, 03, etc. in case of conflicts


			return AddUser(GetAvailableUserNumber(firstName, lastName), password, firstName, lastName, userLevel, group);
		}

		/// <summary>
		/// Adds a user to Vicidial with an autogenerated username and password based on provided firstName and lastName.  Username will be first letter
		/// of first name, followed by at most five first letters of lastname and then optionally a 1, 2, 3, etc. up to 99 to account for conflicting
		/// names.  The password will match the assigned username.
		/// </summary>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="userLevel">Value must be 1 through 9.</param>
		/// <param name="group"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_users AddUser(string firstName, string lastName, int userLevel, vicidial_user_groups group)
		{
			string username = GetAvailableUserNumber(firstName, lastName);

			//passwrod is the same as the username
			return AddUser(username, username, firstName, lastName, userLevel, group);
		}

		private string GetAvailableUserNumber(string firstName, string lastName)
		{
			if (firstName == null || firstName.Length == 0 || lastName == null || lastName.Length == 0)
			{
				string errorMsg = "First and Last names cannot be empty for autogenerated userNumbers";
				EventHandler handler = OnError;
				if (handler != null)
					handler(errorMsg, EventArgs.Empty);

				throw new ApplicationException(errorMsg);
			}


			//make lower in case mysql is case senstive
			firstName = firstName.ToLower();
			lastName = lastName.ToLower();

			//since userNumbers can be 8 digits, we'll get first char of firstname, first 5 chars of last name and then append 01,02, 03, etc. for any conflicts
			StringBuilder name = new StringBuilder();
			name.Append(firstName[0]);
			name.Append(lastName.Length >= 5 ? lastName.Substring(0, 5) : lastName);

			//check if this name exists, if so append the 1..99 until we find an available...the first one doesn't need a number
			if (!UserExists(name.ToString()))
				return name.ToString(); //validate name for new user

			for (int i = 1; i < 99; i++)
			{
				string nameToTest = name.ToString() + i.ToString();
				if (!UserExists(nameToTest))
					return nameToTest;
			}

			throw new ApplicationException("Something wrong with this user, we exhausted all possible user ID's from 1 to 99");

		}


		/// <summary>
		/// Checks if a username exists.
		/// </summary>
		/// <param name="username"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public bool UserExists(string username)
		{
			return GetUser(username) != null;
		}

		/// <summary>
		/// Given a username, return the vicidial_users object corresponding to this username.
		/// </summary>
		/// <param name="username"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public vicidial_users GetUser(string username)
		{
			return _emv.vicidial_users.Where(t => t.user == username).SingleOrDefault();
		}

		/// <summary>
		/// Given a user id, returns the vicidial_users object corresponding to this username.
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public vicidial_users GetUser(long userID)
		{
			return _emv.vicidial_users.Where(t => t.user_id == userID).SingleOrDefault();
		}


		private HashSet<string> GetKeysForEntity(IEntityWithKey entityObject, bool includeEntityKey)
		{
			HashSet<string> keys = new HashSet<string>();
			foreach (var t in entityObject.EntityKey.EntityKeyValues)
				keys.Add(t.Key);


			if (includeEntityKey)
				keys.Add("EntityKey");

			return keys;
		}

		/// <summary>
		/// Adds a user to the system by cloning an existing user.
		/// </summary>
		/// <param name="referenceUser"></param>
		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_users AddUserByCloning(vicidial_users referenceUser, string username, string password, string firstName, string lastName)
		{

			vicidial_users u = AddUser(username, password, firstName, lastName, (int)referenceUser.user_level, GetUserGroup(referenceUser.user_group));

			//more efficient version
			//make sure we do not set keys, put them into a hash (in case there are multiple)
			HashSet<string> keys = GetKeysForEntity(referenceUser, true);

			foreach (PropertyInfo pi in typeof(vicidial_users).GetProperties())
			{
				//skip the keys since they can't be overwritten
				if (keys.Contains(pi.Name))
					continue;

				//skip properties which can't be read or written
				if (!pi.CanWrite || !pi.CanRead)
					continue;


				pi.SetValue(u, pi.GetValue(referenceUser, null), null);
			}

			//copy new values
			u.full_name = string.Format("{0} {1}", firstName, lastName);
			u.pass = password;
			u.user = username;


			//persist the changes
			_emv.SaveChanges();


			return u;
		}

		/// <summary>
		/// Adds a user to the system by cloning an existing user.  Username will be auto generated based on the provided firstname & lastname.
		/// See AddUser for description on expected username values.
		/// </summary>
		/// <param name="referenceUser"></param>
		/// <param name="password"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <returns></returns>
		public vicidial_users AddUserByCloning(vicidial_users referenceUser, string password, string firstName, string lastName)
		{
			string username = GetAvailableUserNumber(firstName, lastName);
			return AddUserByCloning(referenceUser, username, username, firstName, lastName);
		}

		/// <summary>
		/// Adds a user to the system by cloning an existing user.  Username and password will be auto generated based on the provided firstname & lastname.
		/// See AddUser for description on expected username values.
		/// </summary>
		/// <param name="referenceUser"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <returns></returns>
		public vicidial_users AddUserByCloning(vicidial_users referenceUser, string firstName, string lastName)
		{
			string username = GetAvailableUserNumber(firstName, lastName);
			return AddUserByCloning(referenceUser, username, username, firstName, lastName);
		}


		/// <summary>
		/// Returns all the existing users groups within vicidial
		/// </summary>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_user_groups> GetUserGroups()
		{
			return _emv.vicidial_user_groups.OrderBy(t => t.group_name);
		}

		/// <summary>
		/// Returns the group matching the group ID or null if not found.
		/// </summary>
		/// <param name="groupID"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public vicidial_user_groups GetUserGroup(string groupID)
		{
			return _emv.vicidial_user_groups.Where(t => t.user_group == groupID).FirstOrDefault();
		}


		/// <summary>
		/// Given a user group instance, returns the campaigns associated to it.
		/// </summary>
		/// <param name="group"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_campaigns> GetCampaigns(vicidial_user_groups group)
		{
			//first split the field on spaces
			string[] tempCampaignIDs = group.allowed_campaigns.Split(' ');


			List<string> campaignsIds = new List<string>();

			foreach (string campaignID in tempCampaignIDs)
			{
				if (campaignID != "-" && campaignID.Trim() != string.Empty)
					campaignsIds.Add(campaignID);
			}

			return from t in _emv.vicidial_campaigns
				   where campaignsIds.Contains(t.campaign_id)
				   select t;

		}

		/// <summary>
		/// Gets all existing campaigns within vicidial.
		/// </summary>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_campaigns> GetCampaigns()
		{
			return _emv.vicidial_campaigns;
		}


		/// <summary>
		/// Given a campaign instance, returns related inbound groups.
		/// </summary>
		/// <param name="campaign"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_inbound_groups> GetInboundGroups(vicidial_campaigns campaign)
		{
			//first split the field on spaces
			string[] tempInboundGroupIDs = campaign.closer_campaigns.Split(' ');


			List<string> inboundGroupIDs = new List<string>();

			foreach (string groupID in tempInboundGroupIDs)
			{
				if (groupID != "-" && groupID.Trim() != string.Empty)
					inboundGroupIDs.Add(groupID);
			}

			return from t in _emv.vicidial_inbound_groups
				   where inboundGroupIDs.Contains(t.group_id)
				   select t;

		}

		/// <summary>
		/// Given a campaign ID, reutrns related inbound groups.
		/// </summary>
		/// <param name="vicidialCampaignID"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_inbound_groups> GetInboundGroups(string vicidialCampaignID)
		{
			return GetInboundGroups(GetCampaign(vicidialCampaignID));

		}

		/// <summary>
		/// Given a campaign ID returns the related campaign instance or null if not found.
		/// </summary>
		/// <param name="vicidialCampaignID"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public vicidial_campaigns GetCampaign(string vicidialCampaignID)
		{
			return _emv.vicidial_campaigns.Where(t => t.campaign_id == vicidialCampaignID).SingleOrDefault();
		}



		/// <summary>
		/// Given a usergroup ID, return related campaigns.
		/// </summary>
		/// <param name="userGroupID"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_campaigns> GetCampaigns(string userGroupID)
		{
			return GetCampaigns(GetUserGroup(userGroupID));
		}


		/// <summary>
		/// Create a new campaign by cloning an existing campaign.
		/// </summary>
		/// <param name="sourceCampaign"></param>
		/// <param name="campaignID">New campaign ID, needs to be 2 to 8 characters in length</param>
		/// <param name="campaignName">New campaign name</param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_campaigns AddCampaignByCloning(
			vicidial_campaigns sourceCampaign,
			string campaignID,
			string campaignName)
		{
			vicidial_campaigns newCampaign = new vicidial_campaigns();
			vicidial_campaigns existing = (from t in _emv.vicidial_campaigns where t.campaign_id == sourceCampaign.campaign_id select t).SingleOrDefault();

			//copy the campaign verbatim, consider adding a new campaign instead and moving the rules common to the addcampagin method
			newCampaign.campaign_name = campaignName;
			newCampaign.campaign_id = campaignID;
			newCampaign.active = "N";
			newCampaign.dial_status_a = existing.dial_status_a;
			newCampaign.dial_status_b = existing.dial_status_b;
			newCampaign.dial_status_c = existing.dial_status_c;
			newCampaign.dial_status_d = existing.dial_status_d;
			newCampaign.dial_status_e = existing.dial_status_e;
			newCampaign.lead_order = existing.lead_order;
			newCampaign.park_ext = existing.park_ext;
			newCampaign.park_file_name = existing.park_file_name;
			newCampaign.web_form_address = existing.web_form_address;
			newCampaign.allow_closers = existing.allow_closers;
			newCampaign.hopper_level = existing.hopper_level;
			newCampaign.auto_dial_level = existing.auto_dial_level;
			newCampaign.next_agent_call = existing.next_agent_call;
			newCampaign.local_call_time = existing.local_call_time;
			newCampaign.voicemail_ext = existing.voicemail_ext;
			newCampaign.dial_timeout = existing.dial_timeout;
			newCampaign.dial_prefix = existing.dial_prefix;
			newCampaign.campaign_cid = existing.campaign_cid;
			newCampaign.campaign_vdad_exten = existing.campaign_vdad_exten;
			newCampaign.campaign_rec_exten = existing.campaign_rec_exten;
			newCampaign.campaign_recording = existing.campaign_recording;


			//RULE create stats entry
			_emv.vicidial_campaign_stats.AddObject(new vicidial_campaign_stats() { campaign_id = campaignID });

			//RULE create status debug entry
			_emv.vicidial_campaign_stats_debug.AddObject(new vicidial_campaign_stats_debug() { campaign_id = campaignID });


			//RULE copy status verbatim
			foreach (vicidial_campaign_statuses vcs in from t in _emv.vicidial_campaign_statuses
													   where t.campaign_id == sourceCampaign.campaign_id
													   select t)
			{
				//insert these for the new campaign
				_emv.vicidial_campaign_statuses.AddObject(new vicidial_campaign_statuses()
				{
					status = vcs.status,
					status_name = vcs.status_name,
					selectable = vcs.selectable,
					campaign_id = campaignID,		//use the new campaignID
					human_answered = vcs.human_answered,
					category = vcs.category,
					sale = vcs.sale,
					dnc = vcs.dnc,
					customer_contact = vcs.customer_contact,
					not_interested = vcs.not_interested,
					unworkable = vcs.unworkable,
					scheduled_callback = vcs.scheduled_callback
				});
			}


			//RULE copy hotkeys; we dont' use them but we may
			foreach (vicidial_campaign_hotkeys vch in from t in _emv.vicidial_campaign_hotkeys
													  where t.campaign_id == sourceCampaign.campaign_id
													  select t)
			{
				_emv.vicidial_campaign_hotkeys.AddObject(new vicidial_campaign_hotkeys()
				{
					status = vch.status,
					hotkey = vch.hotkey,
					status_name = vch.status_name,
					selectable = vch.selectable,
					campaign_id = campaignID	//use the new campaignID
				});

			}


			//RULE copy lead recycle rules
			foreach (vicidial_lead_recycle vlr in from t in _emv.vicidial_lead_recycle
												  where t.campaign_id == sourceCampaign.campaign_id
												  select t)
			{
				_emv.vicidial_lead_recycle.AddObject(new vicidial_lead_recycle()
				{
					status = vlr.status,
					attempt_delay = vlr.attempt_delay,
					attempt_maximum = vlr.attempt_maximum,
					active = vlr.active,
					campaign_id = campaignID	//use the new campaignID
				});

			}

			//Rule copy over pause codes
			foreach (vicidial_pause_codes vpc in from t in _emv.vicidial_pause_codes
												 where t.campaign_id == sourceCampaign.campaign_id
												 select t)
			{
				_emv.vicidial_pause_codes.AddObject(new vicidial_pause_codes()
				{
					pause_code = vpc.pause_code,
					pause_code_name = vpc.pause_code_name,
					billable = vpc.billable,
					campaign_id = campaignID	//use the new campaignID
				});
			}

			//Rule xfer_presets
			foreach (vicidial_xfer_presets vxp in from t in _emv.vicidial_xfer_presets
												  where t.campaign_id == sourceCampaign.campaign_id
												  select t)
			{
				_emv.vicidial_xfer_presets.AddObject(new vicidial_xfer_presets()
				{
					campaign_id = campaignID,	//use the new campaignID
					preset_name = vxp.preset_name,
					preset_number = vxp.preset_number,
					preset_dtmf = vxp.preset_dtmf,
					preset_hide_number = vxp.preset_hide_number
				});


			}


			//Rule xfer_stats
			foreach (vicidial_xfer_stats vxs in from t in _emv.vicidial_xfer_stats
												where t.campaign_id == sourceCampaign.campaign_id
												select t)
			{
				_emv.vicidial_xfer_stats.AddObject(new vicidial_xfer_stats()
				{
					campaign_id = campaignID,
					preset_name = vxs.preset_name
				});
			}

			//Rule add the log entry after cloning steps are completed
			AddLog(LogEventSection.CAMPAIGNS, LogEventType.COPY, campaignID, null, String.Empty);

			_emv.SaveChanges();

			CampaignAdded handler = OnCampaignAdded;
			if (handler != null)
				handler(newCampaign);

			return newCampaign;
		}

		public void AddLog(LogEventSection section, LogEventType type, string recordID, string event_code, string event_notes)
		{
			var log = new vicidial_admin_log()
			{
				event_date = DateTime.Now,
				event_section = section.Name,
				event_type = type.Name,
				record_id = recordID,
				event_code = event_code == null ? LoggingFacade.Instance.GetEventCode(section, type) : event_code,
				event_sql = "INKTELX_BL",
				event_notes = event_notes
			};

			_emv.vicidial_admin_log.AddObject(log);
			_emv.SaveChanges();
		}



		/// <summary>
		/// Adds a new campaign into Vicidial
		/// </summary>
		/// <param name="campaignID">Must be 2 to 8 characters in length</param>
		/// <param name="campaignName"></param>
		/// <param name="campaignDescription"></param>
		/// <param name="applicationUrl">The url to launch when a call arrives to an agent.</param>
		/// <param name="dialMethod">One of the available DialMethods, see DialMethod class.</param>
		/// <param name="dialLevel">One of the available DialLevels, see DialLevel</param>
		/// <param name="dropPercentage0to1">Permissible Drop Percentage, value must be between 0 and 1</param>
		/// <param name="acdStrategy">One of the available CallDistributionStrategies, see CallDistributionStrategy class.</param>
		/// <param name="callTime">One of the available vicidial_call_times.</param>
		/// <param name="callerID">A ten digit caller ID to be shown when outbound dialing.</param>
		/// <param name="recordCalls">True to record calls with ALLFORCE, false to not record.</param>
		/// <param name="scheduleCallBacks">True to allow scheduled callbacks.</param>
		/// <param name="secondsWrapWarning">Required time to wrap call.</param>
		/// <param name="wrapWarningMessage">Message to show during call wrap.</param>
		/// <returns>Instance of vicidial_campaigns added to system</returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_campaigns AddCampaign(
			string campaignID,
			string campaignName,
			string campaignDescription,
			string applicationUrl,
			string dialMethod,
			double dialLevel,
			double dropPercentage0to1,
			CallDistributionStrategy acdStrategy,	// a convenient encapsulation for fixed values "random", "oldest_call_start", etc.
			vicidial_call_times callTime,
			string callerID,
			bool recordCalls,
			bool scheduleCallBacks,
			int secondsWrapWarning,
			string wrapWarningMessage
			)
		{

			//TODO...experiment with transactions
			//using (DbTransaction trans = _emv.Connection.BeginTransaction())
			//using (TransactionScope ts = new TransactionScope() )


			//RULE ensure campaign is filled in and no more than 8 chars
			if (campaignID == null || campaignID.Length < 2 || campaignID.Length > 8)
				throw new ArgumentException("Campaign must be between 2 and 8 characters");

			//RULE campaign name cannot be left blank
			if (campaignName == null || campaignName.Trim().Length == 0)
				throw new ArgumentException("CampaignName cannot be empty");




			vicidial_campaigns vcdc = new vicidial_campaigns()
			{
				campaign_id = campaignID,
				campaign_name = campaignName,
				campaign_description = campaignDescription,
				web_form_address = applicationUrl,
				dial_method = dialMethod,
				auto_dial_level = dialLevel.ToString("0.0"),
				adaptive_dropped_percentage = (dropPercentage0to1 * 100).ToString("0.0"),
				next_agent_call = acdStrategy,
				local_call_time = callTime.call_time_id,
				campaign_cid = callerID,
				campaign_recording = recordCalls ? "ALLFORCE" : "NEVER",
				scheduled_callbacks = scheduleCallBacks ? "Y" : "N",
				wrapup_seconds = secondsWrapWarning,
				wrapup_message = wrapWarningMessage,
				active = "N"
			};

			_emv.vicidial_campaigns.AddObject(vcdc);
			_emv.SaveChanges();

			//fire event
			CampaignAdded handler = OnCampaignAdded;
			if (handler != null)
				handler(vcdc);

			return vcdc;
		}


		/// <summary>
		/// Get available vicidial_call_times.
		/// </summary>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_call_times> GetCallTimes()
		{
			return _emv.vicidial_call_times;
		}

		/// <summary>
		/// Given a call_time_id, return the corresponding vicidial_call_times instance.
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public vicidial_call_times GetCallTime(string key)
		{
			return (from t in _emv.vicidial_call_times
					where t.call_time_id == key
					select t).SingleOrDefault();
		}


		/// <summary>
		/// Given a campaign ID, delete it.
		/// </summary>
		/// <param name="campaign_id"></param>
		/// <param name="msg">Message / Reason for not deleting campaign.</param>
		/// <returns>True if campaign was deleted, false otherwise</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public bool DeleteCampaign(string campaign_id, out string msg)
		{
			//first check to make sure we have not dialed anything for this campaign
			msg = string.Empty;

			bool dialedAlready = (from t in _emv.vicidial_log
								  where t.campaign_id == campaign_id
								  select t).FirstOrDefault() != null;

			if (!dialedAlready)
			{
				vicidial_campaigns campaignV = (from t in _emv.vicidial_campaigns
												where t.campaign_id == campaign_id
												select t).SingleOrDefault();

				if (campaignV != null)
				{
					_emv.vicidial_campaigns.DeleteObject(campaignV);
					_emv.SaveChanges();
				}

				return true;
			}
			else
			{
				msg = "Cannot delete, campaign was already dialed";
				return false;
			}
		}


		/// <summary>
		/// Returns the fixed list of call distribution strategies available in Vicidial.  CampaignRank, Fewest Calls, Longest Wait Time, Oldest Call Finish,
		/// Oldest Call Start, Overall User Level, Random
		/// </summary>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<CallDistributionStrategy> GetCallDistributionStrategies()
		{
			CallDistributionStrategy[] strategy = {
                                                      CallDistributionStrategy.campaign_rank,
                                                      CallDistributionStrategy.fewest_calls,
                                                      CallDistributionStrategy.longest_wait_time,
                                                      CallDistributionStrategy.oldest_call_finish,
                                                      CallDistributionStrategy.oldest_call_start,
                                                      CallDistributionStrategy.overall_user_level,
													CallDistributionStrategy.random
												  };


			return strategy;
		}

		/// <summary>
		/// Returns the fixed list of dial methods available in Vicidial.  Adapt average, Adapt hard limit, Adapt Tapered, Inbound Man, Manual, and Ratio.
		/// </summary>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<DialMethod> GetDialMethods()
		{
			DialMethod[] methods = {
					DialMethod.adapt_average,
					DialMethod.adapt_hard_limit,
					DialMethod.adapt_tapered,
					DialMethod.inbound_man,
					DialMethod.manual,
					DialMethod.ratio
			};


			return methods;
		}

		/// <summary>
		/// Inserts a new status.  Throws DuplicateKeyException if status key already exists for specified campaign.  Used exclusively for outbound status as inbound requires inbound groups to be be defined in category field.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="statusID">The unique status ID</param>
		/// <param name="name"></param>
		/// <param name="selectable"></param>
		/// <param name="humanAnswer"></param>
		/// <param name="isSale"></param>
		/// <param name="isDNC"></param>
		/// <param name="isCustomerContact"></param>
		/// <param name="unworkable"></param>
		/// <param name="scheduledCallBack"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_campaign_statuses AddCampaignStatus(vicidial_campaigns campaign, string statusID, string name, bool selectable, bool humanAnswer, bool isSale, bool isDNC, bool isCustomerContact, bool unworkable, bool scheduledCallBack)
		{
			return AddCampaignStatus(campaign, null, name, selectable, humanAnswer, isSale, isDNC, isCustomerContact, unworkable, scheduledCallBack);
		}


		/// <summary>
		/// Inserts a new status.  Throws DuplicateKeyException if status key already exists for specified campaign.  If inboundGroup is not null, then it's considered an inbound status and the inbound group will be stored in the category field.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="inboundGroup"></param>
		/// <param name="statusID"></param>
		/// <param name="name"></param>
		/// <param name="selectable"></param>
		/// <param name="humanAnswer"></param>
		/// <param name="isSale"></param>
		/// <param name="isDNC"></param>
		/// <param name="isCustomerContact"></param>
		/// <param name="unworkable"></param>
		/// <param name="scheduledCallBack"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public vicidial_campaign_statuses AddCampaignStatus(vicidial_campaigns campaign, vicidial_inbound_groups inboundGroup, string statusID, string name, bool selectable, bool humanAnswer, bool isSale, bool isDNC, bool isCustomerContact, bool unworkable, bool scheduledCallBack)
		{
			if (inboundGroup != null)
				return AddCampaignStatus(campaign, inboundGroup.group_id, statusID, name, selectable, humanAnswer, isSale, isDNC, isCustomerContact, unworkable, scheduledCallBack);
			else
				return AddCampaignStatus(campaign, statusID, name, selectable, humanAnswer, isSale, isDNC, isCustomerContact, unworkable, scheduledCallBack);
		}

		/// <summary>
		/// Convenience API for inbound group ID as string.  See other overload for details.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="inboundGroup"></param>
		/// <param name="statusID"></param>
		/// <param name="name"></param>
		/// <param name="selectable"></param>
		/// <param name="humanAnswer"></param>
		/// <param name="isSale"></param>
		/// <param name="isDNC"></param>
		/// <param name="isCustomerContact"></param>
		/// <param name="unworkable"></param>
		/// <param name="scheduledCallBack"></param>
		/// <returns></returns>
		public vicidial_campaign_statuses AddCampaignStatus(vicidial_campaigns campaign, string inboundGroup, string statusID, string name, bool selectable, bool humanAnswer, bool isSale, bool isDNC, bool isCustomerContact, bool unworkable, bool scheduledCallBack)
		{


			//RULE - 6 character limit on statusID
			if (statusID == null || statusID.Length < 2 || statusID.Length > 6)
				throw new ArgumentException("Status ID cannot be null and must be between 2 and 6 characters");


			//RULE -- campaign cannot be null
			if (campaign == null)
				throw new ArgumentException("Campaign cannot be null");

			//check to make sure we do have a duplicate key
			bool keyFound = (from t in _emv.vicidial_campaign_statuses
							 where t.status.ToUpper() == statusID.ToUpper() && t.campaign_id == campaign.campaign_id
							 select t).Count() > 0;


			//ensure inbound group
			if (inboundGroup != null && inboundGroup != String.Empty && campaign.campaign_allow_inbound == "N")
				throw new ArgumentException("You specified an inbound group, however the campaign is configured as outbound.  Please change campaign to inbound before calling this API OR use AddCampaignStatus overload without inbound group parameter");



			if (keyFound)
				throw new ApplicationException(String.Format("Duplicate Key found for statusID: {0}", statusID));
			else
			{
				vicidial_campaign_statuses vcs = new vicidial_campaign_statuses();
				vcs.campaign_id = campaign.campaign_id;
				vcs.status = statusID;
				vcs.status_name = name;
				vcs.selectable = selectable ? "Y" : "N";
				vcs.human_answered = humanAnswer ? "Y" : "N";
				vcs.sale = isSale ? "Y" : "N";
				vcs.dnc = isDNC ? "Y" : "N";
				vcs.customer_contact = isCustomerContact ? "Y" : "N";
				vcs.unworkable = unworkable ? "Y" : "N";
				vcs.scheduled_callback = scheduledCallBack ? "Y" : "N";


				//HACK - Inktel stores inbound group id in category for inbound status
				if (inboundGroup != null)
					vcs.category = inboundGroup;

				_emv.vicidial_campaign_statuses.AddObject(vcs);
				_emv.SaveChanges();

				return vcs;
			}

		}



		/// <summary>
		/// Given a campaign, get all it's related statuses
		/// </summary>
		/// <param name="campaign"></param>
		/// <returns></returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_campaign_statuses> GetCampaignStatuses(vicidial_campaigns campaign)
		{
			return _emv.vicidial_campaign_statuses.Where(t => t.campaign_id == campaign.campaign_id);
		}


		[DataObjectMethod(DataObjectMethodType.Update)]
		public vicidial_campaigns UpdateCampaign(vicidial_campaigns campaign)
		{
			vicidial_campaigns current = (from t in _emv.vicidial_campaigns
										  where t.campaign_id == campaign.campaign_id
										  select t).SingleOrDefault();

			if (current == null)
				throw new ApplicationException("Invalid campaign to update");


			//TODO Romel to confirm update campaign rules



			_emv.SaveChanges();


			return current;
		}

		/// <summary>
		/// Update a campaign status.
		/// </summary>
		/// <param name="status"></param>
		/// <returns></returns>
		public vicidial_campaign_statuses UpdateCampaignStatus(vicidial_campaign_statuses status)
		{
			vicidial_campaign_statuses current = (from t in _emv.vicidial_campaign_statuses
												  where t.status == status.status
												  select t).SingleOrDefault();

			if (current == null)
				throw new ApplicationException("Invalid status to update");


			if (status.status_name == null || status.status_name.Length == 0)
				throw new ArgumentException("status_name cannot be null or empty");

			current.customer_contact = ValidateValue(status.customer_contact, "[YyNn]", true);
			current.customer_contact = ValidateValue(status.customer_contact, "[YyNn]", true);
			current.dnc = ValidateValue(status.dnc, "[YyNn]", true);
			current.human_answered = ValidateValue(status.human_answered, "[YyNn]", true);
			current.not_interested = ValidateValue(status.not_interested, "[YyNn]", true);
			current.sale = ValidateValue(status.sale, "[YyNn]", true);
			current.scheduled_callback = ValidateValue(status.scheduled_callback, "[YyNn]", true);
			current.selectable = ValidateValue(status.selectable, "[YyNn]", true);
			current.unworkable = ValidateValue(status.unworkable, "[YyNn]", true);


			//it's possible they are changing the ingroup
			if (status.category != current.category)
			{
				bool ingroupSpecified = current.category != null && current.category.Length > 0;

				if (ingroupSpecified)
				{


					//check to see if a groupid is needed (e.g. if this is inbound, then groupid is required if it's outbound it will be forced to be empty

					vicidial_campaigns campaign = (from t in _emv.vicidial_campaigns
												   where t.campaign_id == current.campaign_id
												   select t).SingleOrDefault();

					if (campaign.campaign_allow_inbound == "Y")
					{
						//make sure the ingroup is a valid
						vicidial_inbound_groups gruop = (from t in _emv.vicidial_inbound_groups
														 where t.group_id == current.category
														 select t).SingleOrDefault();

						//since it's inbound, we need to check inbound group
						if (gruop == null)
							throw new ArgumentException(String.Format("You specified group: {0} for this status {1} and it seems to be an invalid group id", current.category, current.status));
					}
					else
						current.category = String.Empty;
				}

			}



			_emv.SaveChanges();
			return current;
		}


		/// <summary>
		/// Delete campaign status
		/// </summary>
		/// <param name="status"></param>
		public void DeleteCampaignStatus(vicidial_campaign_statuses status)
		{
			//TODO -- we cannot delete, check with Romel where status code is used and we'll check if it exists ..and if so we will throw exception on delete

			List<vicidial_campaign_statuses> vcslist = new List<vicidial_campaign_statuses>();
			vcslist = (from t in _emv.vicidial_campaign_statuses
					   where t.campaign_id == status.campaign_id && t.status == status.status
					   select t).ToList();

			//there should be only one, but just in case lets loop
			//more than one may also cause an exception at mysql since they don't know how to delete such duplicates due to lack of key
			//need to unit test this one.
			foreach (vicidial_campaign_statuses vcs in vcslist)
				_emv.vicidial_campaign_statuses.DeleteObject(vcs);

			_emv.SaveChanges();


			//delete hotkeys
			List<vicidial_campaign_hotkeys> hotkeys = (from t in _emv.vicidial_campaign_hotkeys
													   where t.campaign_id == status.campaign_id && t.status == status.status
													   select t).ToList();

			foreach (vicidial_campaign_hotkeys vch in hotkeys)
				_emv.vicidial_campaign_hotkeys.DeleteObject(vch);

			_emv.SaveChanges();

		}


		/// <summary>
		/// Adds a lead recycle rule.  If one exists, an exception will be thrown informing the user a lead recycle already exists.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="status"></param>
		/// <param name="attemptDelay"></param>
		/// <param name="maxAttempt"></param>
		/// <returns></returns>
		public vicidial_lead_recycle AddLeadRecycle(vicidial_campaigns campaign, vicidial_campaign_statuses status, TimeSpan delayTime, int maxAttempt)
		{
			return AddLeadRecycle(campaign, status.status, delayTime, maxAttempt);
		}

		//TODO  - check this method
		public vicidial_lead_recycle AddLeadRecycle(vicidial_campaigns campaign, vicidial_statuses status, TimeSpan delayTime, int maxAttempt)
		{
			return AddLeadRecycle(campaign, status.status, delayTime, maxAttempt);
		}

		public vicidial_lead_recycle AddLeadRecycle(vicidial_campaigns campaign, string statusID, TimeSpan attemptDelayInSeconds, int maxAttempt)
		{
			//RULE -- ensure it doesn't already exists
			vicidial_lead_recycle lr = (from t in _emv.vicidial_lead_recycle
										where t.campaign_id == campaign.campaign_id &&
										t.status == statusID
										select t).SingleOrDefault();

			if (lr == null)
			{
				lr = new vicidial_lead_recycle()
				{
					active = "N",
					campaign_id = campaign.campaign_id,
					status = statusID,
					attempt_delay = (int)attemptDelayInSeconds.TotalSeconds,
					attempt_maximum = (byte)maxAttempt
				};
			}
			else
				throw new ApplicationException(String.Format("Cannot Add Lead Recycle.  There is already a recycle rule for Campaign {0} and Status {1}", campaign.FriendlyDisplayIDAndName, statusID));

			return lr;
		}

		/// <summary>
		/// Given a campaign and status, returns the corresponding instance of vicidial_campaign_statuses.  Convenient overloads are available using primative types.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="statusID"></param>
		/// <returns></returns>
		public vicidial_campaign_statuses GetCampaignStatus(vicidial_campaigns campaign, vicidial_statuses status)
		{
			return GetCampaignStatus(campaign.campaign_id, status.status);
		}

		/// <summary>
		/// Given a campaign and status, returns the corresponding instance of vicidial_campaign_statuses.  Convenient overloads are available using primative types.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="statusID"></param>
		/// <returns></returns>
		public vicidial_campaign_statuses GetCampaignStatus(vicidial_campaigns campaign, string statusID)
		{
			return GetCampaignStatus(campaign.campaign_id, statusID);
		}


		/// <summary>
		/// Given a campaign and status, returns the corresponding instance of vicidial_campaign_statuses.  Convenient overloads are available using primative types.
		/// </summary>
		/// <param name="campaignID"></param>
		/// <param name="status"></param>
		/// <returns></returns>
		public vicidial_campaign_statuses GetCampaignStatus(string campaignID, vicidial_statuses status)
		{
			return GetCampaignStatus(campaignID, status.status);
		}


		/// <summary>
		/// Given a campaign and status, returns the corresponding instance of vicidial_campaign_statuses.  Convenient overloads are available using primative types.
		/// </summary>
		/// <param name="campaignID"></param>
		/// <param name="statusID"></param>
		/// <returns></returns>
		public vicidial_campaign_statuses GetCampaignStatus(string campaignID, string statusID)
		{
			return (from t in _emv.vicidial_campaign_statuses
					where t.status == statusID &&
					t.campaign_id == campaignID
					select t).SingleOrDefault();

		}



		/// <summary>
		/// Allows you to update a lead recycle, simply use GetLeadRecycle, make the necessary changes and then pass it to this method to update it.
		/// </summary>
		/// <param name="leadRecycle"></param>
		/// <returns></returns>
		public vicidial_lead_recycle UpdateLeadRecycle(vicidial_lead_recycle leadRecycle)
		{
			vicidial_lead_recycle current = (from t in _emv.vicidial_lead_recycle
											 where t.recycle_id == leadRecycle.recycle_id
											 select t).SingleOrDefault();


			if (current == null)
				throw new ArgumentException(String.Format("InktelX Error - Lead Recycle ({0}) does not exist", leadRecycle.recycle_id));


			current.active = ValidateValue(leadRecycle.active, "[YyNn]", true);
			current.attempt_delay = leadRecycle.attempt_delay;
			current.attempt_maximum = leadRecycle.attempt_maximum;
			// current.campaign_id is not updated
			//current.status is not updated

			_emv.SaveChanges();

			return current;
		}


		/// <summary>
		/// Given the recycle ID, returns a vicidial_lead_recycle instance
		/// </summary>
		/// <param name="recycleID"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(long recycleID)
		{
			return (from t in _emv.vicidial_lead_recycle
					where t.recycle_id == recycleID
					select t).SingleOrDefault();
		}

		/// <summary>
		/// Given a campaign & status, returns instance of matching vicidial_lead_recycle.  See various overloads for convenience methods using primitive types for key identification.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="status"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(vicidial_campaigns campaign, vicidial_campaign_statuses status)
		{
			return GetLeadRecycle(campaign.campaign_id, status.status);
		}

		/// <summary>
		/// Given a campaign & status, returns instance of matching vicidial_lead_recycle.  See various overloads for convenience methods using primitive types for key identification.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="status"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(vicidial_campaigns campaign, vicidial_statuses status)
		{
			return GetLeadRecycle(campaign.campaign_id, status.status);
		}

		/// <summary>
		/// Given a campaign & status, returns instance of matching vicidial_lead_recycle.  See various overloads for convenience methods using primative types for key identification.
		/// </summary>
		/// <param name="campaignID"></param>
		/// <param name="status"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(string campaignID, vicidial_campaign_statuses status)
		{
			return GetLeadRecycle(campaignID, status.status);
		}

		/// <summary>
		/// Given a campaign & status, returns instance of matching vicidial_lead_recycle.  See various overloads for convenience methods using primative types for key identification.
		/// </summary>
		/// <param name="campaignID"></param>
		/// <param name="status"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(string campaignID, vicidial_statuses status)
		{
			return GetLeadRecycle(campaignID, status.status);
		}

		/// <summary>
		/// Given a campaign & status, returns instance of matching vicidial_lead_recycle.  See various overloads for convenience methods using primative types for key identification.
		/// </summary>
		/// <param name="campaign"></param>
		/// <param name="statusID"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(vicidial_campaigns campaign, string statusID)
		{
			return GetLeadRecycle(campaign.campaign_id, statusID);
		}

		/// <summary>
		/// Given a campaign & status, returns instance of matching vicidial_lead_recycle.  See various overloads for convenience methods using primative types for key identification.
		/// </summary>
		/// <param name="campaignID"></param>
		/// <param name="statusID"></param>
		/// <returns></returns>
		public vicidial_lead_recycle GetLeadRecycle(string campaignID, string statusID)
		{
			return (from t in _emv.vicidial_lead_recycle
					where t.campaign_id == campaignID &&
					t.status == statusID
					select t).SingleOrDefault();
		}








		private string ValidateValue(string value, string validationRegEx)
		{
			return ValidateValue(value, validationRegEx, false);
		}

		private string ValidateValue(string value, string validationRegEx, bool makeUpper)
		{
			if (!Regex.Match(value, validationRegEx).Success)
				throw new ArgumentException(String.Format("The value {0} is not valid for vicidial.  The valid values are described by this RegEx: {1}", value, validationRegEx));

			if (makeUpper)
				return value.ToUpper();

			return value;
		}


		//public void StartCampaign(string campaignID)
		//{
		//    UpdateCampaign(campaignID, true);
		//}

		//public void StopCampaign(string campaignID)
		//{
		//    UpdateCampaign(campaignID, false);
		//}

		//private void UpdateCampaign(string campaignID, bool startIt)
		//{
		//    vicidial_campaigns campaign = (from t in _emv.vicidial_campaigns
		//                                   where t.campaign_id == campaignID
		//                                   select t).SingleOrDefault();

		//    if (campaign != null)
		//    {
		//        campaign.active = startIt ? "Y" : "N";
		//        _emv.SaveChanges();
		//    }
		//}

		//public vicidial_campaigns GetCampaign(string campaignID)
		//{
		//    return (from t in _emv.vicidial_campaigns
		//            where t.campaign_id == campaignID
		//            select t).SingleOrDefault();
		//}


		/// <summary>
		/// Testing Transaction support for MySql, not being used yet.
		/// </summary>
		public void BeginTransaction()
		{
			_emv.Connection.Open();
			_dbt = _emv.Connection.BeginTransaction();
		}

		/// <summary>
		/// Testing Transaction support for mysql, not being used yet.
		/// </summary>
		public void CommitTransaction()
		{
			_dbt.Commit();
			_emv.Connection.Close();
		}

		[DataObjectMethod(DataObjectMethodType.Select)]
		public IEnumerable<vicidial_user_groups> GetUserGroups(IEnumerable<string> userGroups)
		{
			List<string> userGroupIDs = userGroups.ToList();
			return from t in _emv.vicidial_user_groups
				   where userGroupIDs.Contains(t.user_group)
				   select t;
		}

		/// <summary>
		/// Given a user, it's corresponding instance is loaded by ID and then all properties are mapped from the given user to the corresponding instance.
		/// </summary>
		/// <param name="user"></param>
		public void UpdateUser(vicidial_users user)
		{
			vicidial_users existingUser = GetUser(user.user);
			MapProperties<vicidial_users>(user, existingUser);
			_emv.SaveChanges();
		}


		private void MapProperties<t>(t sender, t recipient) where t : System.Data.Objects.DataClasses.IEntityWithKey
		{
			HashSet<string> keys = GetKeysForEntity(sender, true);

			foreach (PropertyInfo pi in typeof(vicidial_users).GetProperties())
			{
				//skip the keys since they can't be overwritten
				if (keys.Contains(pi.Name))
					continue;

				//skip properties which can't be read or written
				if (!pi.CanWrite || !pi.CanRead)
					continue;


				pi.SetValue(recipient, pi.GetValue(sender, null), null);
			}

		}

		/// <summary>
		/// Returns all the system statuses.
		/// </summary>
		/// <returns></returns>
		public IEnumerable<vicidial_statuses> GetStatuses()
		{
			return _emv.vicidial_statuses;
		}
	}
}
